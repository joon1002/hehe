Server.java (위도경도차이 meter로 치환)

import java.io.DataInputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;


public class Server {
    private static final int SERVER_PORT = 10716;
    private static final double EARTH_RADIUS = 6371000; // 지구의 반지름 (미터)

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(SERVER_PORT)) {
            System.out.println("[*] Listening on port " + SERVER_PORT);

            // 두 개의 클라이언트 연결 대기
            Socket[] clientSockets = new Socket[2];
            for (int i = 0; i < 2; i++) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("[*] Accepted connection from " + clientSocket.getInetAddress() + ":" + clientSocket.getPort());
                clientSockets[i] = clientSocket;
            }

            // 각 클라이언트로부터 위도와 경도를 받음
            double[] latitudes = new double[2];
            double[] longitudes = new double[2];
            for (int i = 0; i < 2; i++) {
                DataInputStream inputStream = new DataInputStream(clientSockets[i].getInputStream());
                latitudes[i] = inputStream.readDouble();
                longitudes[i] = inputStream.readDouble();
                System.out.println("Client " + (i + 1) + " Latitude: " + latitudes[i] + ", Longitude: " + longitudes[i]);
            }

            // 위도와 경도의 차이를 계산
            double latitudeDifference = latitudes[1] - latitudes[0];
            double longitudeDifference = longitudes[1] - longitudes[0];

            // 미터 단위로 변환
            double distance = calculateDistance(latitudes[0], longitudes[0], latitudes[1], longitudes[1]);

            // 출력
            System.out.println("Difference in Latitude: " + latitudeDifference);
            System.out.println("Difference in Longitude: " + longitudeDifference);
            System.out.println("Distance in meters: " + distance);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 위도 및 경도를 미터로 변환하는 메서드
    private static double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
        // 위도 및 경도를 라디안으로 변환
        double latDistance = Math.toRadians(lat2 - lat1);
        double lonDistance = Math.toRadians(lon2 - lon1);

        // 위도 및 경도의 차이에 대한 하버사인 공식 적용
        double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);

        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        // 실제 거리 계산
        return EARTH_RADIUS * c;
    }
}
